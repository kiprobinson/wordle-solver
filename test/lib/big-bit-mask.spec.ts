import { expect } from "chai";
import BigBitMask from "../../app/lib/big-bit-mask";

// generate random masks from here: https://www.random.org/cgi-bin/randbyte?nbytes=9&format=b

describe('test big-bit-mask.ts methods', () => {
  it('constructor - binary string', () => {
    expect(new BigBitMask('0').toString()).to.equal('0');
    expect(new BigBitMask('1').toString()).to.equal('1');
    expect(new BigBitMask('00').toString()).to.equal('00');
    expect(new BigBitMask('01').toString()).to.equal('01');
    expect(new BigBitMask('10').toString()).to.equal('10');
    expect(new BigBitMask('11').toString()).to.equal('11');
    
    // adjust high/low bit of 31-bit mask
    expect(new BigBitMask('0010100001110101101111001001100').toString()).to.equal('0010100001110101101111001001100');
    expect(new BigBitMask('0010100001110101101111001001101').toString()).to.equal('0010100001110101101111001001101');
    expect(new BigBitMask('1010100001110101101111001001100').toString()).to.equal('1010100001110101101111001001100');
    expect(new BigBitMask('1010100001110101101111001001101').toString()).to.equal('1010100001110101101111001001101');
    
    // adjust high/low bit of 32-bit mask
    expect(new BigBitMask('01100011101000111101001001101100').toString()).to.equal('01100011101000111101001001101100');
    expect(new BigBitMask('01100011101000111101001001101101').toString()).to.equal('01100011101000111101001001101101');
    expect(new BigBitMask('11100011101000111101001001101100').toString()).to.equal('11100011101000111101001001101100');
    expect(new BigBitMask('11100011101000111101001001101101').toString()).to.equal('11100011101000111101001001101101');
    
    // adjust high/low bit of 33-bit mask
    expect(new BigBitMask('010011111111111010010011010100100').toString()).to.equal('010011111111111010010011010100100');
    expect(new BigBitMask('010011111111111010010011010100101').toString()).to.equal('010011111111111010010011010100101');
    expect(new BigBitMask('110011111111111010010011010100100').toString()).to.equal('110011111111111010010011010100100');
    expect(new BigBitMask('110011111111111010010011010100101').toString()).to.equal('110011111111111010010011010100101');
    
    // adjust high/low bit of 63-bit mask
    expect(new BigBitMask('010100110010010011001011111011011000111100111001000101000101000').toString()).to.equal('010100110010010011001011111011011000111100111001000101000101000');
    expect(new BigBitMask('010100110010010011001011111011011000111100111001000101000101001').toString()).to.equal('010100110010010011001011111011011000111100111001000101000101001');
    expect(new BigBitMask('110100110010010011001011111011011000111100111001000101000101000').toString()).to.equal('110100110010010011001011111011011000111100111001000101000101000');
    expect(new BigBitMask('110100110010010011001011111011011000111100111001000101000101001').toString()).to.equal('110100110010010011001011111011011000111100111001000101000101001');
    
    // adjust high/low bit of 64-bit mask
    expect(new BigBitMask('0101000010000110101010010101110111010011001011011111111001111010').toString()).to.equal('0101000010000110101010010101110111010011001011011111111001111010');
    expect(new BigBitMask('0101000010000110101010010101110111010011001011011111111001111011').toString()).to.equal('0101000010000110101010010101110111010011001011011111111001111011');
    expect(new BigBitMask('1101000010000110101010010101110111010011001011011111111001111010').toString()).to.equal('1101000010000110101010010101110111010011001011011111111001111010');
    expect(new BigBitMask('1101000010000110101010010101110111010011001011011111111001111011').toString()).to.equal('1101000010000110101010010101110111010011001011011111111001111011');
    
    // adjust high/low bit of 65-bit mask
    expect(new BigBitMask('01100111100001000010011000111011010011010000000111001000100000110').toString()).to.equal('01100111100001000010011000111011010011010000000111001000100000110');
    expect(new BigBitMask('01100111100001000010011000111011010011010000000111001000100000111').toString()).to.equal('01100111100001000010011000111011010011010000000111001000100000111');
    expect(new BigBitMask('11100111100001000010011000111011010011010000000111001000100000110').toString()).to.equal('11100111100001000010011000111011010011010000000111001000100000110');
    expect(new BigBitMask('11100111100001000010011000111011010011010000000111001000100000111').toString()).to.equal('11100111100001000010011000111011010011010000000111001000100000111');
  });
  
  it('constructor - length', () => {
    expect(new BigBitMask(1).toString()).to.equal('0');
    expect(new BigBitMask(10).toString()).to.equal('0000000000');
    expect(new BigBitMask(31).toString()).to.equal('0000000000000000000000000000000');
    expect(new BigBitMask(32).toString()).to.equal('00000000000000000000000000000000');
    expect(new BigBitMask(33).toString()).to.equal('000000000000000000000000000000000');
    expect(new BigBitMask(63).toString()).to.equal('000000000000000000000000000000000000000000000000000000000000000');
    expect(new BigBitMask(64).toString()).to.equal('0000000000000000000000000000000000000000000000000000000000000000');
    expect(new BigBitMask(65).toString()).to.equal('00000000000000000000000000000000000000000000000000000000000000000');
  });
  
  it('constructor - clone', () => {
    const mask1 = new BigBitMask(65);
    const mask2 = new BigBitMask(mask1);
    
    expect(mask1.toString()).to.equal('00000000000000000000000000000000000000000000000000000000000000000');
    expect(mask2.toString()).to.equal('00000000000000000000000000000000000000000000000000000000000000000');
    
    mask1.setBit(10);
    mask2.setBit(40);
    
    expect(mask1.toString()).to.equal('00000000001000000000000000000000000000000000000000000000000000000');
    expect(mask2.toString()).to.equal('00000000000000000000000000000000000000001000000000000000000000000');
  });
  
  it('setBit/isBitSet', () => {
    const mask = new BigBitMask(65);
    expect(mask.toString()).to.equal('00000000000000000000000000000000000000000000000000000000000000000');
    
    expect(mask.isBitSet(0)).to.be.false;
    mask.setBit(0);
    expect(mask.isBitSet(0)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000000000000000000000000000000000000000');
    
    expect(mask.isBitSet(31)).to.be.false;
    mask.setBit(31);
    expect(mask.isBitSet(31)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001000000000000000000000000000000000');
    
    expect(mask.isBitSet(32)).to.be.false;
    mask.setBit(32);
    expect(mask.isBitSet(32)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001100000000000000000000000000000000');
    
    expect(mask.isBitSet(33)).to.be.false;
    mask.setBit(33);
    expect(mask.isBitSet(33)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001110000000000000000000000000000000');
    
    expect(mask.isBitSet(62)).to.be.false;
    mask.setBit(62);
    expect(mask.isBitSet(62)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001110000000000000000000000000000100');
    
    expect(mask.isBitSet(63)).to.be.false;
    mask.setBit(63);
    expect(mask.isBitSet(63)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001110000000000000000000000000000110');
    
    expect(mask.isBitSet(64)).to.be.false;
    mask.setBit(64);
    expect(mask.isBitSet(64)).to.be.true;
    expect(mask.toString()).to.equal('10000000000000000000000000000001110000000000000000000000000000111');
    
    mask.setBit(64, false);
    expect(mask.isBitSet(64)).to.be.false;
    expect(mask.toString()).to.equal('10000000000000000000000000000001110000000000000000000000000000110');
    
    mask.setBit(31, false);
    expect(mask.isBitSet(31)).to.be.false;
    expect(mask.toString()).to.equal('10000000000000000000000000000000110000000000000000000000000000110');
    
    mask.setBit(0, false);
    expect(mask.isBitSet(0)).to.be.false;
    expect(mask.toString()).to.equal('00000000000000000000000000000000110000000000000000000000000000110');
  });
  
  it('union', () => {
    const mask1 = new BigBitMask('111111000110111011010111101010110111010111100010000111110100010010101110');
    const mask2 = new BigBitMask('100011110000001110011110100011111111101110100110011010111100000100011110');
    const mask3 = new BigBitMask('111110010111111000011010010111111010101010100110001110001010000010000101');
    const mask4 = new BigBitMask('101110100010011001010000001111101011100011010110100101010100101110110010');
    
    expect(mask1.union(mask2).toString()).to.equal('111111110110111111011111101011111111111111100110011111111100010110111110');
    expect(mask2.union(mask1).toString()).to.equal('111111110110111111011111101011111111111111100110011111111100010110111110');
    expect(mask1.union(mask2, mask3).toString()).to.equal('111111110111111111011111111111111111111111100110011111111110010110111111');
    expect(mask3.union(mask2, mask1).toString()).to.equal('111111110111111111011111111111111111111111100110011111111110010110111111');
    expect(mask1.union(mask2, mask3, mask4).toString()).to.equal('111111110111111111011111111111111111111111110110111111111110111110111111');
    expect(mask4.union(mask3, mask2, mask1).toString()).to.equal('111111110111111111011111111111111111111111110110111111111110111110111111');
    
    // union with self is identity
    expect(mask1.union(mask1).toString()).to.equal('111111000110111011010111101010110111010111100010000111110100010010101110');
    expect(mask2.union(mask2).toString()).to.equal('100011110000001110011110100011111111101110100110011010111100000100011110');
    expect(mask3.union(mask3).toString()).to.equal('111110010111111000011010010111111010101010100110001110001010000010000101');
    expect(mask4.union(mask4).toString()).to.equal('101110100010011001010000001111101011100011010110100101010100101110110010');
    
    // make sure we didn't modify any of the originals
    expect(mask1.toString()).to.equal('111111000110111011010111101010110111010111100010000111110100010010101110');
    expect(mask2.toString()).to.equal('100011110000001110011110100011111111101110100110011010111100000100011110');
    expect(mask3.toString()).to.equal('111110010111111000011010010111111010101010100110001110001010000010000101');
    expect(mask4.toString()).to.equal('101110100010011001010000001111101011100011010110100101010100101110110010');
  });
  
  it('intersect', () => {
    const mask1 = new BigBitMask('010000110000000111010110011011110000100110000110110101010010000001010011');
    const mask2 = new BigBitMask('011111000101100010101100100010001000011011101010111010101110111011101000');
    const mask3 = new BigBitMask('001100011011010011111011011010010010011110111010111001001011100001101001');
    const mask4 = new BigBitMask('111011111011000011001110110111000001100111111110000101110111001000101100');
    
    expect(mask1.intersect(mask2).toString()).to.equal('010000000000000010000100000010000000000010000010110000000010000001000000');
    expect(mask2.intersect(mask1).toString()).to.equal('010000000000000010000100000010000000000010000010110000000010000001000000');
    expect(mask1.intersect(mask2, mask3).toString()).to.equal('000000000000000010000000000010000000000010000010110000000010000001000000');
    expect(mask3.intersect(mask2, mask1).toString()).to.equal('000000000000000010000000000010000000000010000010110000000010000001000000');
    expect(mask1.intersect(mask2, mask3, mask4).toString()).to.equal('000000000000000010000000000010000000000010000010000000000010000000000000');
    expect(mask4.intersect(mask3, mask2, mask1).toString()).to.equal('000000000000000010000000000010000000000010000010000000000010000000000000');
    
    // intersect with self is identity
    expect(mask1.intersect(mask1).toString()).to.equal('010000110000000111010110011011110000100110000110110101010010000001010011');
    expect(mask2.intersect(mask2).toString()).to.equal('011111000101100010101100100010001000011011101010111010101110111011101000');
    expect(mask3.intersect(mask3).toString()).to.equal('001100011011010011111011011010010010011110111010111001001011100001101001');
    expect(mask4.intersect(mask4).toString()).to.equal('111011111011000011001110110111000001100111111110000101110111001000101100');
    
    // make sure we didn't modify any of the originals
    expect(mask1.toString()).to.equal('010000110000000111010110011011110000100110000110110101010010000001010011');
    expect(mask2.toString()).to.equal('011111000101100010101100100010001000011011101010111010101110111011101000');
    expect(mask3.toString()).to.equal('001100011011010011111011011010010010011110111010111001001011100001101001');
    expect(mask4.toString()).to.equal('111011111011000011001110110111000001100111111110000101110111001000101100');
  });
  
  it('subtract', () => {
    const mask1 = new BigBitMask('010110001001011111100100011101111111001101101111100011110111111011011110');
    const mask2 = new BigBitMask('100001101101110001011100111100111001011100000001011000100011011011111100');
    const mask3 = new BigBitMask('010001011110110001011100011001111100010110100000000100001011100010110111');
    
    expect(mask1.subtract(mask2).toString()).to.equal('010110000000001110100000000001000110000001101110100011010100100000000010');
    expect(mask2.subtract(mask1).toString()).to.equal('100001100100100000011000100000000000010000000000011000000000000000100000');
    expect(mask1.subtract(mask3).toString()).to.equal('000110000001001110100000000100000011001001001111100011110100011001001000');
    expect(mask3.subtract(mask1).toString()).to.equal('000001010110100000011000000000000000010010000000000100001000000000100001');
    expect(mask2.subtract(mask3).toString()).to.equal('100000100001000000000000100100000001001000000001011000100000011001001000');
    expect(mask3.subtract(mask2).toString()).to.equal('010000010010000000000000000001000100000010100000000100001000100000000011');
    
    // subtract self gives all zeros
    expect(mask1.subtract(mask1).toString()).to.equal('000000000000000000000000000000000000000000000000000000000000000000000000');
    expect(mask2.subtract(mask2).toString()).to.equal('000000000000000000000000000000000000000000000000000000000000000000000000');
    expect(mask3.subtract(mask3).toString()).to.equal('000000000000000000000000000000000000000000000000000000000000000000000000');
    
    // make sure we didn't modify any of the originals
    expect(mask1.toString()).to.equal('010110001001011111100100011101111111001101101111100011110111111011011110');
    expect(mask2.toString()).to.equal('100001101101110001011100111100111001011100000001011000100011011011111100');
    expect(mask3.toString()).to.equal('010001011110110001011100011001111100010110100000000100001011100010110111');
  });
  
  it('getBitCount', () => {
    expect(new BigBitMask('0').getBitCount()).to.equal(0);
    expect(new BigBitMask('1').getBitCount()).to.equal(1);
    expect(new BigBitMask('00').getBitCount()).to.equal(0);
    expect(new BigBitMask('01').getBitCount()).to.equal(1);
    expect(new BigBitMask('10').getBitCount()).to.equal(1);
    expect(new BigBitMask('11').getBitCount()).to.equal(2);
    
    // high/low bits of 31, 32, and 33 bit masks
    expect(new BigBitMask('0000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('1000000000000000000000000000000').getBitCount()).to.equal(1);
    expect(new BigBitMask('00000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('10000000000000000000000000000000').getBitCount()).to.equal(1);
    expect(new BigBitMask('000000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('100000000000000000000000000000000').getBitCount()).to.equal(1);
    
    // inverse of above
    expect(new BigBitMask('1111111111111111111111111111110').getBitCount()).to.equal(30);
    expect(new BigBitMask('0111111111111111111111111111111').getBitCount()).to.equal(30);
    expect(new BigBitMask('11111111111111111111111111111110').getBitCount()).to.equal(31);
    expect(new BigBitMask('01111111111111111111111111111111').getBitCount()).to.equal(31);
    expect(new BigBitMask('111111111111111111111111111111110').getBitCount()).to.equal(32);
    expect(new BigBitMask('011111111111111111111111111111111').getBitCount()).to.equal(32);
    
    // high/low bits of 63, 64, and 65 bit masks
    expect(new BigBitMask('000000000000000000000000000000000000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('100000000000000000000000000000000000000000000000000000000000000').getBitCount()).to.equal(1);
    expect(new BigBitMask('0000000000000000000000000000000000000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('1000000000000000000000000000000000000000000000000000000000000000').getBitCount()).to.equal(1);
    expect(new BigBitMask('00000000000000000000000000000000000000000000000000000000000000001').getBitCount()).to.equal(1);
    expect(new BigBitMask('10000000000000000000000000000000000000000000000000000000000000000').getBitCount()).to.equal(1);
    
    // inverse of above
    expect(new BigBitMask('111111111111111111111111111111111111111111111111111111111111110').getBitCount()).to.equal(62);
    expect(new BigBitMask('011111111111111111111111111111111111111111111111111111111111111').getBitCount()).to.equal(62);
    expect(new BigBitMask('1111111111111111111111111111111111111111111111111111111111111110').getBitCount()).to.equal(63);
    expect(new BigBitMask('0111111111111111111111111111111111111111111111111111111111111111').getBitCount()).to.equal(63);
    expect(new BigBitMask('11111111111111111111111111111111111111111111111111111111111111110').getBitCount()).to.equal(64);
    expect(new BigBitMask('01111111111111111111111111111111111111111111111111111111111111111').getBitCount()).to.equal(64);
    
    // a few random values
    expect(new BigBitMask('110100010011011111100101010111111100110001011101000000110010011111001111').getBitCount()).to.equal(41);
    expect(new BigBitMask('010100010111000000010000111110011000011101100111011100000100101011000011').getBitCount()).to.equal(32);
    expect(new BigBitMask('000100111001100111111110001111011111111010111110000111010101001010111000').getBitCount()).to.equal(43);
    expect(new BigBitMask('111001111001101001110111110100010001010011101100000010100001101101011000').getBitCount()).to.equal(36);
  });
  
  it('apply', () => {
    const values:number[] = [];
    for(let i = 1; i <= 31; i++)
      values.push(100 + i);
    
    // high/low bits of 31 bit mask
    expect(new BigBitMask('0000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('0000000000000000000000000000001').apply(values)).to.deep.equal([131]);
    expect(new BigBitMask('1000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('1111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
    ]);
    expect(new BigBitMask('1111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
    ]);
    expect(new BigBitMask('0111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
    ]);
    
    // high/low bits of 32 bit mask
    values.push(132);
    expect(new BigBitMask('00000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('00000000000000000000000000000001').apply(values)).to.deep.equal([132]);
    expect(new BigBitMask('10000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('11111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
    ]);
    expect(new BigBitMask('11111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
    ]);
    expect(new BigBitMask('01111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
    ]);
    
    // high/low bits of 33 bit mask
    values.push(133);
    expect(new BigBitMask('000000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('000000000000000000000000000000001').apply(values)).to.deep.equal([133]);
    expect(new BigBitMask('100000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('111111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
    ]);
    expect(new BigBitMask('111111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
    ]);
    expect(new BigBitMask('011111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
    ]);
    
    // high/low bits of 63 bit mask
    for(let i = 34; i <= 63; i++)
      values.push(100 + i);
    expect(new BigBitMask('000000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('000000000000000000000000000000000000000000000000000000000000001').apply(values)).to.deep.equal([163]);
    expect(new BigBitMask('100000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('111111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
    ]);
    expect(new BigBitMask('111111111111111111111111111111111111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
    ]);
    expect(new BigBitMask('011111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
    ]);
    
    // high/low bits of 64 bit mask
    values.push(164);
    expect(new BigBitMask('0000000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('0000000000000000000000000000000000000000000000000000000000000001').apply(values)).to.deep.equal([164]);
    expect(new BigBitMask('1000000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('1111111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    ]);
    expect(new BigBitMask('1111111111111111111111111111111111111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
    ]);
    expect(new BigBitMask('0111111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    ]);
    
    // high/low bits of 65 bit mask
    values.push(165);
    expect(new BigBitMask('00000000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([]);
    expect(new BigBitMask('00000000000000000000000000000000000000000000000000000000000000001').apply(values)).to.deep.equal([165]);
    expect(new BigBitMask('10000000000000000000000000000000000000000000000000000000000000000').apply(values)).to.deep.equal([101]);
    expect(new BigBitMask('11111111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
    ]);
    expect(new BigBitMask('11111111111111111111111111111111111111111111111111111111111111110').apply(values)).to.deep.equal([
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    ]);
    expect(new BigBitMask('01111111111111111111111111111111111111111111111111111111111111111').apply(values)).to.deep.equal([
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
    ]);
    
    // a few random 9-byte values
    for(let i = 66; i <= 72; i++)
      values.push(100 + i);
    expect(new BigBitMask('100010010001111001100001101111011011101001011000000000011110110001101100').apply(values)).to.deep.equal([
      101, 105, 108, 112, 113, 114, 115, 118, 119, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 139, 142, 144, 145, 156, 157, 158, 159, 161, 162, 166, 167, 169, 170, 
    ]);
    expect(new BigBitMask('001111001010000010110100111110111111010010111000111011110001110100001010').apply(values)).to.deep.equal([
      103, 104, 105, 106, 109, 111, 117, 119, 120, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 141, 143, 144, 145, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 164, 169, 171, 
    ]);
    expect(new BigBitMask('100101010111110101111110001001100101100010000101100111010001111111000101').apply(values)).to.deep.equal([
      101, 104, 106, 108, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 127, 130, 131, 134, 136, 137, 141, 146, 148, 149, 152, 153, 154, 156, 160, 161, 162, 163, 164, 165, 166, 170, 172, 
    ]);
  });
});
